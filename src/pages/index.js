import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import Editor from 'components/Editor'
import Navegador from 'components/Navegador'
import Archivero from 'components/Archivero'
import { useEffect, useState } from 'react'
import compile from 'helpers/compile'
import Navigator from 'components/Navigator/Navigator'
import Codespace from 'components/Codespace/Codespace'
import Output from 'components/Output/Output'
import Compile from 'components/Compile/Compile'
import Cube from 'components/Cube/Cube'
import { useLife } from 'context/lifeContext'
import { useCompile } from 'context/compileContext'
const inter = Inter({ subsets: ['latin'] })

export default function Home() {
    const {damaging} = useLife()
    const {portalActive} = useCompile()
    // const handleCreate = (e) =>{
    //     e.preventDefault()
    //     alert(nuevo)
    //     setArchivo(
    //       {
    //         nombre: nuevo,
    //         codigo: null
    //       }
    //     )
    //     setCrear(false)
    // }

    // const handleSave = (e) =>{
    //   if(archivo ){
    //     setArchivo({
    //       ...archivo,
    //       codigo: codigo
    //     })
    //     setGuardado(true)
    //   }
    // }

    // const tokens = []

    // useEffect( () =>{
    //   const tiposvariables = ['material', 'materiales', 'casa']
    //   const simbolos = ['<', '>']
    //   const material = '\^(material) ([A-Za-z]+) (<) (piedra|madera|cemento) (>) [0-9]+$'
    //   const casa = '\^(casa) ([A-Za-z]+) (<) (grande|mediana|chica) (>) (<) ([A-Za-z]+) (>)$'
    //   const materiales = '\^(materiales.)(agregar|quitar) (<) ([A-Za-z]+) (>)$'
    //   const linea = codigo.split('\n')
    //   const espacios = []
    //   linea.map((l) =>{
    //     espacios.push(l.split(' '))  
    //   })
    //   linea.map((l) =>{
    //     const match = l.match(material)
    //     if(match !== null){
    //       console.log(match, 'Match')
    //     }
    //     const match2 = l.match(casa)
    //     if (match2 !== null){
    //       console.log(match2, 'Match')
    //     }
    //     const match3 = l.match(materiales)
    //     if(match3 !== null){
    //       console.log(match3, 'Match')
    //     }
    //   })
    //   const back = document.getElementById('back')
    //   back.innerHTML = ''
    //   espacios.map((line) =>{
    //     line.map((palabra) =>{
    //       const variables = `^(${tiposvariables.join('|')})$`;
    //       const variable = palabra.match(variables);
    //       if(variable !==  null){
    //         back.innerHTML += `<span class=${styles.reservada}>${palabra}</span><span> </span>`
    //       }
    //       else{
    //         const digitos = `\^[0-9]+$`;
    //         const digito = palabra.match(digitos);
    //         if(digito != null){
    //           back.innerHTML += `<span class=${styles.digito}>${palabra}</span><span> </span>`
    //         }else{
    //             back.innerHTML += `<span>${palabra}</span><span> </span>`
    //         }
    //       }
    //     })
    //     back.innerHTML += `</br>`
    //   })

    // }, [codigo])

    // const lineCount = codigo.split('\n');

    // const handleCompile = e =>{

    //   compile(codigo)
    // }
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css" integrity="sha512-MV7K8+y+gLIBoVD59lQIYicR65iaqukzvf/nwasF0nqhPay5w/9lJmVM2hMDcnK1OnMGCdVK+iQrJ7lzPJQd1w==" crossOrigin="anonymous" referrerPolicy="no-referrer" />
      </Head>
      <Navigator />
      <main className={`${styles.main} ${portalActive && styles.end} `}>
        <Codespace/>
        <Output />
      </main>
      {
        damaging && <div className={styles.damage}></div>
      }
    </>
  )
}

{/* <div className={styles.navegador}>
<button className={styles.crear} onClick={() => setCrear(!crear)}>
  <Image 
    src={require('../../public/libro.png')}
    className={styles.nuevo}
    alt={'Libro'}
  />
</button>
{
    crear ? <>
            <form onSubmit={handleCreate} className={styles.formulario}>
                <input type={'text'} value={nuevo} onChange={e => setNuevo(e.target.value)}/>
            </form>
            </> : null
}
{
  guardado ? <button className={styles.guardar} onClick={() => setGuardado(false)}>Editar</button> : null
}
{
  archivo && !guardado ? <button className={styles.guardar} onClick={handleSave}>Guardar</button> : null
}
{
  archivo && guardado ? <button onClick={handleCompile} className={styles.ejecutar}><i className="fa-solid fa-play"></i></button> : null
}
{archivo ? 
<h1 className={styles.archivo}>
        {archivo.nombre}<span className={styles.rdc}>.rdc</span>
</h1>
:
null
}
</div>
<div className={styles.editor}>

<div className={styles.codigo}>
<div className={styles.numeracion}>
{lineCount.map((line, index) => (
    <p key={index}>{index + 1}</p>
  ))}
</div>
<div id={'back'} className={styles.back}>
  
</div>
<textarea id='codigo' readOnly={guardado} className={`${styles.texto} ${codigo.length == 0 ? styles.vacio : null}`} onChange={e => setCoodigo(e.target.value)} value={codigo}>

</textarea>
</div>
<div className={styles.output}>
<div className={styles.message}>
  
</div>
<div className={styles.build}>
    <div className={styles.building}>
      <Image 
        src={require('../../public/crafting.png')}
        className={styles.crafteo}
        alt={'Crafting table'}
      />
    </div>
</div>
</div>

</div> */}
